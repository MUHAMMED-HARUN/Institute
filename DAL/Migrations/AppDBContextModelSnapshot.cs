// <auto-generated />
using System;
using DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.AuditableEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("AuditableEntities");
                });

            modelBuilder.Entity("DAL.Models.clsAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<int>("NeighborhoodID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("NeighborhoodID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DAL.Models.clsCity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DAL.Models.clsClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<string>("CalssDiscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<float>("SubscriptionFee")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("DAL.Models.clsCountriy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.ToTable("Countriys");
                });

            modelBuilder.Entity("DAL.Models.clsDepartment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DAL.Models.clsDistrict", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DAL.Models.clsEnrolmentStudentInClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrolmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("ClassID");

                    b.HasIndex("StudentID");

                    b.ToTable("EnrolmentStudent");
                });

            modelBuilder.Entity("DAL.Models.clsEnrolmentTeacherInClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndEnrolmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnrolmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("ClassID");

                    b.HasIndex("TeacherID");

                    b.ToTable("EnrolmentTeachers");
                });

            modelBuilder.Entity("DAL.Models.clsNeighborhood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<string>("NeighborhoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("DistrictID");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("DAL.Models.clsPayment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("AmountDue")
                        .HasColumnType("real");

                    b.Property<float>("PaidAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentEnrollmentId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentEnrollmentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DAL.Models.clsPerson", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gendor")
                        .HasColumnType("bit");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIDImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceOfBirthID")
                        .HasColumnType("int");

                    b.Property<short>("RelationshipStatus")
                        .HasColumnType("smallint");

                    b.HasKey("PersonID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("PlaceOfBirthID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DAL.Models.clsStudent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("PersonID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DAL.Models.clsTeacher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AuditableEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PersonID")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuditableEntityID");

                    b.HasIndex("PersonID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DAL.Models.clsAddress", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsNeighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("DAL.Models.clsCity", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsCountriy", "Countriy")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Countriy");
                });

            modelBuilder.Entity("DAL.Models.clsClass", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DAL.Models.clsCountriy", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.Navigation("AuditableEntity");
                });

            modelBuilder.Entity("DAL.Models.clsDepartment", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.Navigation("AuditableEntity");
                });

            modelBuilder.Entity("DAL.Models.clsDistrict", b =>
                {
                    b.HasOne("DAL.Models.clsCity", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DAL.Models.clsEnrolmentStudentInClass", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.clsStudent", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DAL.Models.clsEnrolmentTeacherInClass", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.clsTeacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Class");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DAL.Models.clsNeighborhood", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("District");
                });

            modelBuilder.Entity("DAL.Models.clsPayment", b =>
                {
                    b.HasOne("DAL.Models.clsEnrolmentStudentInClass", "EnrolmentStudentInClass")
                        .WithMany()
                        .HasForeignKey("StudentEnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnrolmentStudentInClass");
                });

            modelBuilder.Entity("DAL.Models.clsPerson", b =>
                {
                    b.HasOne("DAL.Models.clsAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsCity", "PlaceOfBirth")
                        .WithMany()
                        .HasForeignKey("PlaceOfBirthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AuditableEntity");

                    b.Navigation("PlaceOfBirth");
                });

            modelBuilder.Entity("DAL.Models.clsStudent", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DAL.Models.clsTeacher", b =>
                {
                    b.HasOne("DAL.Models.AuditableEntity", "AuditableEntity")
                        .WithMany()
                        .HasForeignKey("AuditableEntityID");

                    b.HasOne("DAL.Models.clsPerson", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditableEntity");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
